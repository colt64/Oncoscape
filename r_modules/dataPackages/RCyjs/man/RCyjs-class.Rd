\name{RCyjsClass}
\docType{class}

% the class
\alias{RCyjs}
\alias{class:RCyjsClass}
\alias{RCyjsClass-class}
\alias{show,RCyjsClass-method}

\alias{setGraph}
\alias{setGraph,RCyjsClass-method}
\alias{\S4method{setGraph}{RCyjsClass}}

\alias{addGraph}
\alias{addGraph,RCyjsClass-method}
\alias{\S4method{addGraph}{RCyjsClass}}

\alias{httpAddGraph}
\alias{httpAddGraph,RCyjsClass-method}
\alias{\S4method{httpAddGraph}{RCyjsClass}}

\alias{httpSetStyle}
\alias{httpSetStyle,RCyjsClass-method}
\alias{\S4method{httpSetStyle}{RCyjsClass}}

\alias{setNodeAttributes}
\alias{setNodeAttributes,RCyjsClass-method}
\alias{\S4method{setNodeAttributes}{RCyjsClass}}

\alias{getNodeCount}
\alias{getNodeCount,RCyjsClass-method}
\alias{\S4method{getNodeCount}{RCyjsClass}}

\alias{getEdgeCount}
\alias{getEdgeCount,RCyjsClass-method}
\alias{\S4method{getEdgeCount}{RCyjsClass}}

\alias{getNodes}
\alias{getNodes,RCyjsClass-method}
\alias{\S4method{getNodes}{RCyjsClass}}

\alias{setDefaultNodeSize}
\alias{setDefaultNodeSize,RCyjsClass-method}
\alias{\S4method{setDefaultNodeSize}{RCyjsClass}}

\alias{setDefaultNodeWidth}
\alias{setDefaultNodeWidth,RCyjsClass-method}
\alias{\S4method{setDefaultNodeWidth}{RCyjsClass}}

\alias{setDefaultNodeHeight}
\alias{setDefaultNodeHeight,RCyjsClass-method}
\alias{\S4method{setDefaultNodeHeight}{RCyjsClass}}

\alias{setDefaultNodeColor}
\alias{setDefaultNodeColor,RCyjsClass-method}
\alias{\S4method{setDefaultNodeColor}{RCyjsClass}}

\alias{setDefaultNodeShape}
\alias{setDefaultNodeShape,RCyjsClass-method}
\alias{\S4method{setDefaultNodeShape}{RCyjsClass}}

\alias{setDefaultNodeFontColor}
\alias{setDefaultNodeFontColor,RCyjsClass-method}
\alias{\S4method{setDefaultNodeFontColor}{RCyjsClass}}

\alias{setDefaultNodeFontSize}
\alias{setDefaultNodeFontSize,RCyjsClass-method}
\alias{\S4method{setDefaultNodeFontSize}{RCyjsClass}}

\alias{setDefaultNodeBorderWidth}
\alias{setDefaultNodeBorderWidth,RCyjsClass-method}
\alias{\S4method{setDefaultNodeBorderWidth}{RCyjsClass}}

\alias{setDefaultNodeBorderColor}
\alias{setDefaultNodeBorderColor,RCyjsClass-method}
\alias{\S4method{setDefaultNodeBorderColor}{RCyjsClass}}

\alias{setDefaultEdgeFontSize}
\alias{setDefaultEdgeFontSize,RCyjsClass-method}
\alias{\S4method{setDefaultEdgeFontSize}{RCyjsClass}}

\alias{setDefaultEdgeTargetArrowShape}
\alias{setDefaultEdgeTargetArrowShape,RCyjsClass-method}
\alias{\S4method{setDefaultEdgeTargetArrowShape}{RCyjsClass}}

\alias{setDefaultEdgeColor}
\alias{setDefaultEdgeColor,RCyjsClass-method}
\alias{\S4method{setDefaultEdgeColor}{RCyjsClass}}

\alias{setDefaultEdgeTargetArrowColor}
\alias{setDefaultEdgeTargetArrowColor,RCyjsClass-method}
\alias{\S4method{setDefaultEdgeTargetArrowColor}{RCyjsClass}}

\alias{setDefaultEdgeFontSize}
\alias{setDefaultEdgeFontSize,RCyjsClass-method}
\alias{\S4method{setDefaultEdgeFontSize}{RCyjsClass}}

\alias{setDefaultEdgeWidth}
\alias{setDefaultEdgeWidth,RCyjsClass-method}
\alias{\S4method{setDefaultEdgeWidth}{RCyjsClass}}

\alias{setDefaultEdgeLineColor}
\alias{setDefaultEdgeLineColor,RCyjsClass-method}
\alias{\S4method{setDefaultEdgeLineColor}{RCyjsClass}}

\alias{setDefaultEdgeFont}
\alias{setDefaultEdgeFont,RCyjsClass-method}
\alias{\S4method{setDefaultEdgeFont}{RCyjsClass}}

\alias{setDefaultEdgeFontWeight}
\alias{setDefaultEdgeFontWeight,RCyjsClass-method}
\alias{\S4method{setDefaultEdgeFontWeight}{RCyjsClass}}

\alias{setDefaultEdgeTextOpacity}
\alias{setDefaultEdgeTextOpacity,RCyjsClass-method}
\alias{\S4method{setDefaultEdgeTextOpacity}{RCyjsClass}}

\alias{setDefaultEdgeLineStyle}
\alias{setDefaultEdgeLineStyle,RCyjsClass-method}
\alias{\S4method{setDefaultEdgeLineStyle}{RCyjsClass}}

\alias{setDefaultEdgeOpacity}
\alias{setDefaultEdgeOpacity,RCyjsClass-method}
\alias{\S4method{setDefaultEdgeOpacity}{RCyjsClass}}

\alias{setDefaultEdgeSourceArrowColor}
\alias{setDefaultEdgeSourceArrowColor,RCyjsClass-method}
\alias{\S4method{setDefaultEdgeSourceArrowColor}{RCyjsClass}}

\alias{setDefaultEdgeSourceArrowShape}
\alias{setDefaultEdgeSourceArrowShape,RCyjsClass-method}
\alias{\S4method{setDefaultEdgeSourceArrowShape}{RCyjsClass}}

\alias{getSelectedNodes}
\alias{getSelectedNodes,RCyjsClass-method}
\alias{\S4method{getSelectedNodes}{RCyjsClass}}

\alias{invertNodeSelection}
\alias{invertNodeSelection,RCyjsClass-method}
\alias{\S4method{invertNodeSelection}{RCyjsClass}}

\alias{hideSelectedNodes}
\alias{hideSelectedNodes,RCyjsClass-method}
\alias{\S4method{hideSelectedNodes}{RCyjsClass}}

\alias{deleteSelectedNodes}
\alias{deleteSelectedNodes,RCyjsClass-method}
\alias{\S4method{deleteSelectedNodes}{RCyjsClass}}

\alias{setNodeLabelRule}
\alias{setNodeLabelRule,RCyjsClass-method}
\alias{\S4method{setNodeLabelRule}{RCyjsClass}}

\alias{setNodeLabelAlignment}
\alias{setNodeLabelAlignment,RCyjsClass-method}
\alias{\S4method{setNodeLabelAlignment}{RCyjsClass}}

\alias{setNodeSizeRule}
\alias{setNodeSizeRule,RCyjsClass-method}
\alias{\S4method{setNodeSizeRule}{RCyjsClass}}

\alias{setNodeColorRule}
\alias{setNodeColorRule,RCyjsClass-method}
\alias{\S4method{setNodeColorRule}{RCyjsClass}}

\alias{setNodeShapeRule}
\alias{setNodeShapeRule,RCyjsClass-method}
\alias{\S4method{setNodeShapeRule}{RCyjsClass}}

\alias{setEdgeStyle}
\alias{setEdgeStyle,RCyjsClass-method}
\alias{\S4method{setEdgeStyle}{RCyjsClass}}

\alias{setEdgeColorRule}
\alias{setEdgeColorRule,RCyjsClass-method}
\alias{\S4method{setEdgeColorRule}{RCyjsClass}}

\alias{setEdgeWidthRule}
\alias{setEdgeWidthRule,RCyjsClass-method}
\alias{\S4method{setEdgeWidthRule}{RCyjsClass}}

\alias{setEdgeTargetArrowShapeRule}
\alias{setEdgeTargetArrowShapeRule,RCyjsClass-method}
\alias{\S4method{setEdgeTargetArrowShapeRule}{RCyjsClass}}

\alias{setEdgeTargetArrowColorRule}
\alias{setEdgeTargetArrowColorRule,RCyjsClass-method}
\alias{\S4method{setEdgeTargetArrowColorRule}{RCyjsClass}}

\alias{setEdgeSourceArrowShapeRule}
\alias{setEdgeSourceArrowShapeRule,RCyjsClass-method}
\alias{\S4method{setEdgeSourceArrowShapeRule}{RCyjsClass}}

\alias{setEdgeSourceArrowColorRule}
\alias{setEdgeSourceArrowColorRule,RCyjsClass-method}
\alias{\S4method{setEdgeSourceArrowColorRule}{RCyjsClass}}

\alias{redraw}
\alias{redraw,RCyjsClass-method}
\alias{\S4method{redraw}{RCyjsClass}}

\alias{hideAllEdges}
\alias{hideAllEdges,RCyjsClass-method}
\alias{\S4method{hideAllEdges}{RCyjsClass}}

\alias{hideEdges}
\alias{hideEdges,RCyjsClass-method}
\alias{\S4method{hideEdges}{RCyjsClass}}

\alias{showAllEdges}
\alias{showAllEdges,RCyjsClass-method}
\alias{\S4method{showAllEdges}{RCyjsClass}}

\alias{showEdges}
\alias{showEdges,RCyjsClass-method}
\alias{\S4method{showEdges}{RCyjsClass}}

\alias{layoutStrategies}
\alias{layoutStrategies,RCyjsClass-method}
\alias{\S4method{layoutStrategies}{RCyjsClass}}

\alias{layout}
\alias{layout,RCyjsClass-method}
\alias{\S4method{layout}{RCyjsClass}}

\alias{hAlign}
\alias{hAlign,RCyjsClass-method}
\alias{\S4method{hAlign}{RCyjsClass}}

\alias{vAlign}
\alias{vAlign,RCyjsClass-method}
\alias{\S4method{vAlign}{RCyjsClass}}

\alias{layoutSelectionInGrid}
\alias{layoutSelectionInGrid,RCyjsClass-method}
\alias{\S4method{layoutSelectionInGrid}{RCyjsClass}}

\alias{layoutSelectionInGridInferAnchor}
\alias{layoutSelectionInGridInferAnchor,RCyjsClass-method}
\alias{\S4method{layoutSelectionInGridInferAnchor}{RCyjsClass}}

\alias{getPosition}
\alias{getPosition,RCyjsClass-method}
\alias{\S4method{getPosition}{RCyjsClass}}

\alias{setPosition}
\alias{setPosition,RCyjsClass-method}
\alias{\S4method{setPosition}{RCyjsClass}}

\alias{getLayout}
\alias{getLayout,RCyjsClass-method}
\alias{\S4method{getLayout}{RCyjsClass}}

\alias{saveLayout}
\alias{saveLayout,RCyjsClass-method}
\alias{\S4method{saveLayout}{RCyjsClass}}

\alias{restoreLayout}
\alias{restoreLayout,RCyjsClass-method}
\alias{\S4method{restoreLayout}{RCyjsClass}}

\alias{getJSON}
\alias{getJSON,RCyjsClass-method}
\alias{\S4method{getJSON}{RCyjsClass}}

\alias{fit}
\alias{fit,RCyjsClass-method}
\alias{\S4method{fit}{RCyjsClass}}

\alias{fitContent}
\alias{fitContent,RCyjsClass-method}
\alias{\S4method{fitContent}{RCyjsClass}}

\alias{fitSelectedContent}
\alias{fitSelectedContent,RCyjsClass-method}
\alias{\S4method{fitSelectedContent}{RCyjsClass}}

\alias{selectNodes}
\alias{selectNodes,RCyjsClass-method}
\alias{\S4method{selectNodes}{RCyjsClass}}

\alias{sfn}
\alias{sfn,RCyjsClass-method}
\alias{\S4method{sfn}{RCyjsClass}}

\alias{clearSelection}
\alias{clearSelection,RCyjsClass-method}
\alias{\S4method{clearSelection}{RCyjsClass}}

\alias{getZoom}
\alias{getZoom,RCyjsClass-method}
\alias{\S4method{getZoom}{RCyjsClass}}

\alias{setZoom}
\alias{setZoom,RCyjsClass-method}
\alias{\S4method{setZoom}{RCyjsClass}}

\alias{setBackgroundColor}
\alias{setBackgroundColor,RCyjsClass-method}
\alias{\S4method{setBackgroundColor}{RCyjsClass}}

\alias{biocGraphToCytoscapeJSON}
\alias{createTestGraph}
\alias{eda}
\alias{edaNames}
\alias{noa}
\alias{noaNames}
\alias{simpleDemoGraph}


\title{RCyjs: Interactive R/browser network visualization, using cytoscape.js}

\description{
  A "Cytoscape ecosystem" exists, with the desktop Cytoscape 3.x
  as the heavyweight tool, and the browser-based cytoscape.js a very
  nice and somewhat compatible alternative.   The current package, RCyjs, provides
  programmatic control of cytoscape.js from an R session using the
  BrowserViz base class.  This ensures that both R and the cytoscape.js
  sessions retain full interactivity.  A large portion of the RCyjs API
  is taken from the RCytoscape package.

}

\usage{
% functions first, starting with the class constructor
RCyjs(portRange, host="localhost", title="RCyjs", graph=graphNEL(),
      hideEdges=FALSE, quiet=TRUE)
simpleDemoGraph()
createTestGraph(nodeCount, edgeCount)
biocGraphToCytoscapeJSON(graph)
noa(graph, node.attribute.name)
eda(graph, edge.attribute.name)
noaNames(graph)
edaNames(graph)

% now class methods
\S4method{setGraph}{RCyjsClass}(obj, graph, hideEdges)
\S4method{addGraph}{RCyjsClass}(obj, graph)
\S4method{httpAddGraph}{RCyjsClass}(obj, graph)
\S4method{httpSetStyle}{RCyjsClass}(obj, filename)
\S4method{setNodeAttributes}{RCyjsClass}(obj, attribute, nodes, values)
\S4method{getNodeCount}{RCyjsClass}(obj)
\S4method{getEdgeCount}{RCyjsClass}(obj)
\S4method{getNodes}{RCyjsClass}(obj)
\S4method{getSelectedNodes}{RCyjsClass}(obj)
\S4method{invertNodeSelection}{RCyjsClass}(obj)
\S4method{hideSelectedNodes}{RCyjsClass}(obj)
\S4method{deleteSelectedNodes}{RCyjsClass}(obj)
\S4method{clearSelection}{RCyjsClass}(obj)
\S4method{redraw}{RCyjsClass}(obj)
\S4method{hideAllEdges}{RCyjsClass}(obj)
\S4method{hideEdges}{RCyjsClass}(obj, edgeType)
\S4method{showAllEdges}{RCyjsClass}(obj)
\S4method{showEdges}{RCyjsClass}(obj, edgeType)
\S4method{setNodeLabelRule}{RCyjsClass}(obj, attribute)
\S4method{setNodeLabelAlignment}{RCyjsClass}(obj, horizontal, vertical)
\S4method{setNodeSizeRule}{RCyjsClass}(obj, attribute, control.points, node.sizes)
\S4method{setNodeColorRule}{RCyjsClass}(obj, attribute, control.points, colors, mode)
\S4method{setNodeShapeRule}{RCyjsClass}(obj, attribute, control.points, node.shapes)
\S4method{setEdgeStyle}{RCyjsClass}(obj, mode)
\S4method{setEdgeColorRule}{RCyjsClass}(obj, attribute, control.points, colors, mode)
\S4method{setEdgeWidthRule}{RCyjsClass}(obj, attribute, control.points, widths, mode)
\S4method{setEdgeTargetArrowShapeRule}{RCyjsClass}(obj, attribute, control.points, shapes)
\S4method{setEdgeTargetArrowColorRule}{RCyjsClass}(obj, attribute, control.points, colors, mode)
\S4method{setEdgeSourceArrowShapeRule}{RCyjsClass}(obj, attribute, control.points, shapes)
\S4method{setEdgeSourceArrowColorRule}{RCyjsClass}(obj, attribute, control.points, colors, mode)
\S4method{layout}{RCyjsClass}(obj, strategy)
\S4method{layoutStrategies}{RCyjsClass}(obj)
\S4method{getPosition}{RCyjsClass}(obj, nodeIDs=NA)
\S4method{setPosition}{RCyjsClass}(obj, tbl.pos)
\S4method{getLayout}{RCyjsClass}(obj)
\S4method{saveLayout}{RCyjsClass}(obj, filename)
\S4method{restoreLayout}{RCyjsClass}(obj, filename)
\S4method{getJSON}{RCyjsClass}(obj)
\S4method{setZoom}{RCyjsClass}(obj, newValue)
\S4method{getZoom}{RCyjsClass}(obj)
\S4method{setBackgroundColor}{RCyjsClass}(obj, newValue)
\S4method{fit}{RCyjsClass}(obj, padding)
\S4method{fitContent}{RCyjsClass}(obj, padding)
\S4method{fitSelectedContent}{RCyjsClass}(obj, padding)
\S4method{hAlign}{RCyjsClass}(obj)
\S4method{vAlign}{RCyjsClass}(obj)
\S4method{layoutSelectionInGrid}{RCyjsClass}(obj, x, y, w, h)
\S4method{layoutSelectionInGridInferAnchor}{RCyjsClass}(obj, w, h)
\S4method{selectNodes}{RCyjsClass}(obj, nodeIDs)
\S4method{sfn}{RCyjsClass}(obj)
\S4method{setDefaultNodeSize}{RCyjsClass}(obj, newValue)
\S4method{setDefaultNodeHeight}{RCyjsClass}(obj, newValue)
\S4method{setDefaultNodeShape}{RCyjsClass}(obj, newValue)
\S4method{setDefaultNodeFontSize}{RCyjsClass}(obj, newValue)
\S4method{setDefaultNodeBorderColor}{RCyjsClass}(obj, newValue)
\S4method{setDefaultEdgeTargetArrowShape}{RCyjsClass}(obj, newValue)
\S4method{setDefaultEdgeColor}{RCyjsClass}(obj, newValue)
\S4method{setDefaultEdgeTargetArrowColor}{RCyjsClass}(obj, newValue)
\S4method{setDefaultEdgeFontSize}{RCyjsClass}(obj, newValue)
\S4method{setDefaultEdgeWidth}{RCyjsClass}(obj, newValue)
\S4method{setDefaultEdgeLineColor}{RCyjsClass}(obj, newValue)
\S4method{setDefaultEdgeFont}{RCyjsClass}(obj, newValue)
\S4method{setDefaultEdgeFontWeight}{RCyjsClass}(obj, newValue)
\S4method{setDefaultEdgeTextOpacity}{RCyjsClass}(obj, newValue)
\S4method{setDefaultEdgeLineStyle}{RCyjsClass}(obj, newValue)
\S4method{setDefaultEdgeOpacity}{RCyjsClass}(obj, newValue)
\S4method{setDefaultEdgeSourceArrowColor}{RCyjsClass}(obj, newValue)
\S4method{setDefaultEdgeSourceArrowShape}{RCyjsClass}(obj, newValue)
}


\arguments{

  \item{portRange}{One or more consecutive integers in the range
    1025-65535. A typical choice is \code{9000:9024}.  The BrowserViz
    class constructor will try these one at a time in succession until
    a free port is found and the  connection to your web browser is
    established.  If no open ports are found in the supplied range,
    an error is reported.}

  \item{host}{Nearly always left to its default value, "localhost" but
  included as a parameter supporting remote computers for future flexibility.}

  \item{title}{The constructor creates a new window (or a new tab,
  depending on how you web browser is configured). This title is
  displayed at the top of the window or tab.}

  \item{graph}{A graphNEL object.}

  \item{quiet}{Trace and tracking messages are written to the R console
  if this variable is set to FALSE.}

  \item{obj}{The \code{RCyjsClass} object returned by the
     class constructor.}

  \item{newValue}{A new size, color, shape (etc.) value to be used in
    rendering the network.}


  \item{horizontal}{"left", "right", "center": specifies node label position.}

  \item{vertical}{"top", "bottom", "center": specifies node label position.}

  \item{attribute}{Many network rendering rules are controlled by the
  value of a node or edge attribute.  This characacter string is the
  name of that controlling attribute.}

  \item{control.points}{Values (2 or more) of an edge or node attribute
  at which color, size (etc) rendering changes.}

  \item{node.sizes}{A list of pixel values.}

  \item{colors}{A list of colors.  Well-known names (e.g.,
  "red") can be used.  An RGB triplet (red, green blue) will always
  work, and provides more specificity: "rgb(0, 255, 128)" }

  \item{mode}{either "lookup" for when the controlling node or edge
  attribute is categorical, or "interpolate" when the attribute is continous.}

  \item{node.shapes}{One of "ellipse", "triangle", "pentagon", "hexagon", "heptagon", "octagon", "star",
           "rectangle", "roundrectangle".}

  \item{widths}{The width, in pixels, for edges.}

  \item{shapes}{For edge "decorations" -- the arrow (and etcetera) that
  decorates the ends of edges, as they connect to nodes.  Currently
  supported values are "arrow", "tee" and "none" (the default).}

  \item{strategy}{A character string, this names a network layout
  strategy.  Currently supported: "breadthfirst", "circle", "concentric", "cose", "grid", "random".}

  \item{nodeIDs}{Nodes as identified by the "id" field in their
  cytoscape.js data.}

  \item{tbl.pos}{A 3-column data.frame describing node positions: "id", "x", "y"}

  \item{filename}{A character string representing a valid path in your filesystem.}

  \item{nodeCount}{An integer value for the requested graph.}
  \item{edgeCount}{An integer value for the requested graph.}
  \item{node.attribute.name}{a character string.}
  \item{edge.attribute.name}{a character string.}
  \item{hideEdges}{A logical value. If the graph has many edges, you may
  wish to hide them initially.}
  \item{nodes}{Character list, node ids.}
  \item{values}{Any type.}
  \item{edgeType}{Character value.}
  \item{padding}{Integer value, pixels.}
  \item{x}{Integer value, pixels.}
  \item{y}{Integer value, pixels.}
  \item{w}{Integer value, pixels.}
  \item{h}{Integer value, pixels.}
}


\author{Paul Shannon}


\examples{
   library(RCyjs)
    
   g <- simpleDemoGraph()  # a 3-node, 3-edge graph with some node and edge attributes
   noaNames(g)
   edaNames(g)
   
   rcy <- RCyjs(portRange=9047:9057, quiet=TRUE, graph=g);

   title <- "demo"
   setBrowserWindowTitle(rcy, title)

   tbl.nodes <- getNodes(rcy)

   setNodeLabelRule(rcy, "label");
   setNodeSizeRule(rcy, "count", c(0, 30, 110), c(20, 50, 100));
   setNodeColorRule(rcy, "count", c(0, 100), c("rgb(0,255,0)", "rgb(255,0,0)"), mode="interpolate")
   redraw(rcy)
   layout(rcy, "cose")
   closeWebSocket(rcy)
}



\keyword{classes}
\keyword{methods}

